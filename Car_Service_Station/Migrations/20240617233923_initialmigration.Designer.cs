// <auto-generated />
using System;
using Car_Service_Station.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Car_Service_Station.Migrations
{
    [DbContext(typeof(CarServiceDbContext))]
    [Migration("20240617233923_initialmigration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Car_Service_Station.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Car_Service_Station.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Energie")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EngineSpec")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Model_Year")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextDateService")
                        .HasColumnType("Date");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlateLicence")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<double>("PriceInvoke")
                        .HasColumnType("float");

                    b.HasKey("CarId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Car_Service_Station.Models.ServiceCar", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("CarId");

                    b.ToTable("ServiceCars");
                });

            modelBuilder.Entity("Car_Service_Station.Models.Appointment", b =>
                {
                    b.HasOne("Car_Service_Station.Models.Car", "Car")
                        .WithOne("Appointment")
                        .HasForeignKey("Car_Service_Station.Models.Appointment", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Car_Service_Station.Models.ServiceCar", b =>
                {
                    b.HasOne("Car_Service_Station.Models.Car", "Car")
                        .WithMany("ServiceCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Car_Service_Station.Models.Car", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();

                    b.Navigation("ServiceCars");
                });
#pragma warning restore 612, 618
        }
    }
}
